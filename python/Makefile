### Standard targets
FILES := vdifio_api.xml vdifio/vdifio.py

all: depcheck vdifio/vdifio.py 

clean:
	rm -f $(FILES)

dist:
	# will be packaged by toplevel
distdir:
	# will be packaged by toplevel

install: vdifio/vdifio.py
	python setup.py install

### Checks

XML2PY_V := $(shell xml2py --help 2>/dev/null)
H2XML_V := $(shell h2xml --help 2>/dev/null)

depcheck:
ifndef H2XML_V
	$(error Cannot find Python ctypes utility h2xml (h2xml.py) required to parse C/C++ header file.)
endif
ifndef XML2PY_V
	$(error Cannot find Python ctypes utility xml2py (xml2py.py) required for Python interface code generation.)
endif

XML2PY_BUGCHECK_V := $(shell grep new_mark5_stream_absorb vdifio/vdifio.py 2>/dev/null)

check: 
ifndef XML2PY_BUGCHECK_V
	$(error The ctypes code generator 'xml2py' did not produce function wrappers, may need to be patched)
else
	$(info The generated Python interface seems okay.)
endif

### Convert vdifio C/C++ header into API description (XML) using 'h2xml.py' from ctypeslib

# Note: by design, h2xml.py is using C++ to convert headers. However,
# there are issues with C++ <complex> and the Python conversion.
# For this reason we create a copy of 'mark5_stream.h' to force C-only headers 
# and the C <complex.h> definition of complex numbers:
#
mark5_stream_tmp.h: ../vdifio/mark5_stream.h depcheck
	@echo "#undef __cplusplus" > mark5_stream_tmp.h
	@grep -v complex ../vdifio/mark5_stream.h >> mark5_stream_tmp.h

vdifio_api.xml: ../src/vdifio.h depcheck
	h2xml ../src/vdifio.h -o vdifio_api.xml  -I $(CURDIR)


### Convert vdifio API description (XML) into Python using 'xml2py.py' from ctypeslib

# Standard flags
X2P_FLAGS := -k esf 

# Enums to include in wrapper
X2P_FLAGS += -s VDIFHeaderPrintLevel

# Structs to include in wrapper
X2P_FLAGS += -s vdif_header -s vdif_edv1_header -s vdif_edv3_header -s vdif_mux \
             -s vdif_mux_statistics -s vdif_file_summary

# Functions to include in wrapper, select with "regular expression"
# Note: for -r <regex> to work properly xml2py.py v0.5.6 must be patched (see README)
X2P_FLAGS += -r "VDIF" -r "vdif" -r "vdifmux"

# For the code generation should use libvdifio.so from the build tree.
# The user may not yet have done a 'make install' on libvdifio.so.
X2P_FLAGS += -l ../src/.libs/libvdifio.so

vdifio/vdifio.py: vdifio_api.xml
	@echo "# This file was auto-generated by ctypeslib" > vdifio/vdifio.py
	xml2py vdifio_api.xml $(X2P_FLAGS) >> vdifio/vdifio.py
	# remove the library path from the generated .py file
	sed -i "s/..\/src\/.libs\///g" vdifio/vdifio.py
